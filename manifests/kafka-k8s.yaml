apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-config-debug
  labels:
    app: kafka
data:
  KAFKA_CFG_ZOOKEEPER_CONNECT: "zookeeper:2181"
 
  KAFKA_CFG_LISTENERS: "PLAINTEXT://0.0.0.0:9092"
  KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
  KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT"
  KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
 
  KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
  KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
  KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: "1"
  KAFKA_CFG_NUM_PARTITIONS: "1"
  KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"

  KAFKA_CFG_LOG_LEVEL: "INFO"
  
  KAFKA_KRAFT_CLUSTER_ID: ""
  
  KAFKA_OPTS: "-Djava.net.preferIPv4Stack=true"
---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  labels:
    app: kafka
spec:
  serviceName: kafka-headless
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
      - name: kafka
        image: bitnami/kafka:latest
        ports:
        - containerPort: 9092
          name: kafka
        env:
        - name: ALLOW_PLAINTEXT_LISTENER
          value: "yes"
        - name: BITNAMI_DEBUG
          value: "true" 
        envFrom:
        - configMapRef:
            name: kafka-config-debug
        volumeMounts:
        - name: data
          mountPath: /bitnami/kafka
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        readinessProbe:
          tcpSocket:
            port: 9092
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
        livenessProbe:
          tcpSocket:
            port: 9092
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 5Gi